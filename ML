{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "yeast:train - exists, not redownloading\n",
      "yeast:test - exists, not redownloading\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.6064872325741891"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from skmultilearn.dataset import load_dataset\n",
    "from sklearn.model_selection import train_test_split\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import random\n",
    "from scipy.sparse import csr_matrix\n",
    "from skmultilearn.adapt import MLkNN\n",
    "from skmultilearn.adapt import BRkNNbClassifier\n",
    "from sklearn.metrics import f1_score\n",
    "from skmultilearn.problem_transform import ClassifierChain\n",
    "from skmultilearn.problem_transform import LabelPowerset\n",
    "from sklearn.svm import SVC\n",
    "X_train, y_train, feature_names, label_names = load_dataset('yeast','train')#修改数据集'yeast':emotion,scene,enron,medical\n",
    "X_test,y_test,_,_=load_dataset('yeast','test')#数据集\n",
    "X_array=X_train.toarray()\n",
    "y_array=y_train.toarray()\n",
    "def IRLbls(y,length):\n",
    "    label_numbers=np.zeros((1,length))\n",
    "    for label in range(length):\n",
    "        label_numbers[0,label]=y[:,label].sum()\n",
    "    label_numbers=np.concatenate(label_numbers)\n",
    "    IRLbls=np.zeros((1,length))\n",
    "    for i in range(length):\n",
    "        if label_numbers[i]<6:\n",
    "            IRLbls[0,i]=1\n",
    "        else:\n",
    "            IRLbls[0,i]=max(label_numbers)/label_numbers[i]\n",
    "    return IRLbls\n",
    "\n",
    "    \n",
    "def getNeighbors(bags,k,X):\n",
    "    Neighbors=np.zeros((len(bags),k))\n",
    "    for i in range(len(bags)):\n",
    "        distances=np.zeros((2,len(bags)))\n",
    "        for j in range(len(bags)):\n",
    "            distances[0,j]=bags[j]\n",
    "        for j in range(len(bags)):\n",
    "            distances[1,j]=np.linalg.norm(X[bags[i],:]-X[bags[j],:])\n",
    "        sorts=distances.T[np.argsort(distances.T[:,1])].T\n",
    "        for m in range(k):\n",
    "            Neighbors[i,m]=(sorts[0,m+1])\n",
    "    return Neighbors\n",
    "        \n",
    "def getNearestNeighbors(bags,X,number):\n",
    "    NearestNeighbors=[]\n",
    "    for i in range(len(bags)):\n",
    "        distances=np.zeros((2,number))\n",
    "        for j in range(number):\n",
    "            distances[0,j]=j\n",
    "            distances[1,j]=np.linalg.norm(X[bags[i],:]-X[j,:])\n",
    "        sorts=distances.T[np.argsort(distances.T[:,1])].T\n",
    "        NearestNeighbors.append(sorts[0,1])\n",
    "    return NearestNeighbors\n",
    "\n",
    "def NewSample(sample,refNeigh,neighbors,X,y,flen,length):\n",
    "    synthSmpl=np.zeros((1,flen))\n",
    "    synthSmplLabel=np.zeros((1,length))\n",
    "    for i in range(synthSmpl.shape[1]):\n",
    "        diff=X[refNeigh,i]-X[sample,i]\n",
    "        offset=diff*random.random()\n",
    "        value=X[sample,i]+offset\n",
    "        synthSmpl[0,i]=value\n",
    "    for i in range(synthSmplLabel.shape[1]):\n",
    "        templabel=y[sample,i]\n",
    "        for j in range(len(neighbors)):\n",
    "            templabel+=y[int(neighbors[j]),i]\n",
    "        if templabel>(1+len(neighbors))/2:\n",
    "            synthSmplLabel[0,i]=1\n",
    "        else:\n",
    "            synthSmplLabel[0,i]=0\n",
    "    return synthSmpl,synthSmplLabel\n",
    "\n",
    "def MLSmote(k,X,y,number,flen,length):\n",
    "    X_new=X\n",
    "    y_new=y\n",
    "    counter=0\n",
    "    for i in range(length):\n",
    "        IRs=IRLbls(y_new,length)\n",
    "        MeanIR=IRs.mean()\n",
    "        sorts=IRs.argsort()\n",
    "        labelnumber=sorts[0,len(label_names)-1]\n",
    "        if IRs[0,labelnumber]>MeanIR:\n",
    "            instances=[]\n",
    "            for j in range(number):\n",
    "                if y[j,labelnumber]==1:\n",
    "                    instances.append(j)\n",
    "            Neighbors=getNeighbors(instances,5,X)\n",
    "            for j in range(len(instances)):\n",
    "                ref=random.randint(0,4)\n",
    "                refNeighbor=int(Neighbors[j,ref])\n",
    "                newSample,newLabel=NewSample(instances[j],refNeighbor,Neighbors[j,:],X,y,flen,length)\n",
    "                X_new=np.row_stack((X_new,newSample))\n",
    "                y_new=np.row_stack((y_new,newLabel))\n",
    "                counter+=1\n",
    "                if counter==k:\n",
    "                    return csr_matrix(X_new),csr_matrix(y_new)\n",
    "\n",
    "def GET_TH(Mean):\n",
    "    I = 1 / np.sqrt(Mean)\n",
    "    if I >= 0.5:\n",
    "        return 0.5\n",
    "    if I < 0.3:\n",
    "        return 0.15\n",
    "    else:\n",
    "        return 0.3\n",
    "    \n",
    "def ADH(y,length,num1,num2):\n",
    "    OR=0\n",
    "    XOR=0\n",
    "    for i in range(length):\n",
    "        if y[int(num1),i]!=y[int(num2),i]:\n",
    "            XOR+=1\n",
    "        if y[int(num1),i]+y[int(num2),i]>=1:\n",
    "            OR+=1\n",
    "    return XOR/OR\n",
    "\n",
    "def MLTL(k,X,y,number,flen,length):\n",
    "    X_new=X\n",
    "    y_new=y\n",
    "    counter=0\n",
    "    TL=[]\n",
    "    for i in range(length):\n",
    "        IRs=IRLbls(y_new,length)\n",
    "        MeanIR=IRs.mean()\n",
    "        TH=GET_TH(MeanIR)\n",
    "        sorts=IRs.argsort()\n",
    "        labelnumber=sorts[0,0]\n",
    "        if IRs[0,labelnumber]<MeanIR:\n",
    "            instances=[]\n",
    "            for j in range(number):\n",
    "                if y[j,labelnumber]==1:\n",
    "                    instances.append(j)\n",
    "            NearestNeighbors=getNearestNeighbors(instances,X,number)\n",
    "            for j in range(len(instances)):\n",
    "                if instances[j] in TL:\n",
    "                    continue\n",
    "                dist=ADH(y,length,instances[j],NearestNeighbors[j])\n",
    "                if dist>TH:\n",
    "                    TL.append(instances[j])\n",
    "                    counter+=1\n",
    "                    if counter==k:\n",
    "                        X_new=np.delete(X_new,TL,axis=0)\n",
    "                        y_new=np.delete(y_new,TL,axis=0)    \n",
    "                        return csr_matrix(X_new),csr_matrix(y_new)\n",
    "    X_new=np.delete(X_new,TL,axis=0)\n",
    "    y_new=np.delete(y_new,TL,axis=0)         \n",
    "    return csr_matrix(X_new),csr_matrix(y_new)\n",
    "    \n",
    "\n",
    "number=X_train.shape[0]\n",
    "flen=X_train.shape[1]\n",
    "length=y_train.shape[1]\n",
    "k=int(number/4)\n",
    "smote_X,smote_y=MLSmote(k,X_array,y_array,number,flen,length)\n",
    "#print(IRLbls(smote_y.toarray(),smote_y.shape[1]).mean())  \n",
    "tl_X,tl_y=MLTL(k,smote_X.toarray(),smote_y.toarray(),number,flen,length)\n",
    "#print(IRLbls(tl_y.toarray(),tl_y.shape[1]).mean())  \n",
    "clf=MLkNN(k=10)\n",
    "\n",
    "# clf=BRkNNbClassifier(k=10)\n",
    "\n",
    "# clf = ClassifierChain(\n",
    "#     classifier = SVC(),\n",
    "#     require_dense = [False, True]\n",
    "# )\n",
    "\n",
    "# clf = LabelPowerset(\n",
    "#       classifier=SVC()\n",
    "# )\n",
    "\n",
    "clf.fit(tl_X,tl_y)\n",
    "prediction=clf.predict(X_test)\n",
    "f1_score(y_test,prediction,average='micro')\n",
    "\n",
    "  \n",
    "               \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "|"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
